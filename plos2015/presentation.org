#+TITLE: Tapir: a language for verified OS kernel probes
#+AUTHOR: Ilya Yanok, Nathaniel Nystrom
#+DATE: 4 Oct 2015

#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1 reveal_history:nil
#+OPTIONS: reveal_keyboard:t reveal_mathjax:t reveal_overview:t
#+OPTIONS: reveal_progress:t reveal_rolling_links:nil reveal_single_file:nil
#+OPTIONS: reveal_slide_number:t reveal_title_slide:t reveal_width:-1
#+OPTIONS: toc:nil num:nil
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: serif
#+REVEAL_EXTRA_CSS: presentation.css
#+REVEAL_EXTRA_JS:
#+REVEAL_HLEVEL: 2
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h2>%t</h2> <h3>%a</h3> <h4>%d</h4>
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML,local/my.js
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_SLIDE_HEADER:
#+REVEAL_SLIDE_FOOTER:
#+REVEAL_PLUGINS:
#+REVEAL_DEFAULT_FRAG_STYLE:


* Motivation
** System debugging and tuning
- Systems are large and complex
- Problems often occur only after deployment
- Need to debug and tune *interactions* between system components *in the field*
- => Whole-system dynamic instrumentation
** Whole-system dynamic instrumentation
- Inject *probes* into application programs and into the kernel
- Probes inspect the program (kernel) state at their insertion point

** DTrace [Cantrill et al. 2004]
- Small C-like language ("D") for writing probes
- Probes can be inserted (almost) anywhere
  - user programs
  - device drivers
  - the kernel
- Probes inserted dynamically
  - zero cost when no probes are active

** Probes must not cause panic
**** Probes cannot ...
- write to application or kernel data structures
- access memory-mapped I/O space
- dynamically allocate memory in the kernel
- cause hardware traps
  - e.g., division by zero, accessing unmapped pages or unaligned addresses
- run for a long time (especially in the kernel)

** How does DTrace ensure safety?
**** Embed trusted VM in the kernel
- Compile probes into bytecode for a simple VM
- VM does run-time checks during bytecode interpretation
- Memory fault handler traps back to the interpreter

**** Restrict the DSL
- Writes to kernel or application memory forbidden
- Loops forbidden
- No recursive functions (or really, any functions)

** SystemTap [RedHat]
**** Similar to DTrace but...
- DSL supports functions and loops
- No VM. Probes are compiled to native code
- Run-time safety checks are inserted by the compiler
#+REVEAL: split

**** But!!! The DSL allows embedded C code
#+BEGIN_QUOTE
There are a number of undocumented but complex safety constraints on
concurrency, resource consumption and runtime limits that are applied to code
written in the SystemTap language. These constraints are not applied to embedded
C code, so use embedded C code with extreme caution. Be especially careful when
dereferencing pointers.

-- SystemTap Specification
#+END_QUOTE

* Idea
** Our goal
**** Whole-system instrumentation solution
- provides the same level of safety guarantees as DTrace
- compiles probes to native code
- no ad-hoc analysis
- support for loops (work in progress)

** Tapir
#+begin_src ditaa :file images/tapir.png :cmdline -T :cache yes
    +-----------+                    +------------+
    | tapir DSL |                    |            |
    +-----------+                    |            |
          |                          |            |
  compile |                          |            |
          v                          |            |
    +-----------+                    |  running   |
    | safe Core |                    |  kernel    |
    +-----------+                    |            |
          |                          |            |
  compile |                          |            |
          v                          |            |
    +-----------+     injection      +-------+    |
    |     C     |------------------->| probe |    |
    +-----------+                    +-------+----+
#+end_src
** Front-end language
- DTrace-like syntax
- hides the complexity
- compiles to Core

** Restrict the language
**** Both DTrace and SystemTap use combination of two approaches
- Restricted language
- Run-time checks
**** Can we restrict our language even more?
In a way such that all the required run-time checks are guaranteed to present?
** Type systems could be used to restrict the language
#+begin_src ditaa :file images/types.png :cmdline -E -T :cache yes
/----------------------------\
|                            |
|  syntactically correct     |
|        programs            |
|           /----------------+
|           |                |
|  cRED     |  type safe     |
|           |   programs     |
|           |  cGRE          |
\-----------+----------------/
#+end_src
*** Richer type system could enforce more interesting properties
#+begin_src ditaa :file images/types1.png :cmdline -E -T :cache yes
/--------------------------------\
|      cRED                      |
|    syntactically correct       |
|          programs  /--\        |
|             /------/  \--\  /--+
|             |            |  |  |
|          /--/            \--/  |
|          |       type safe     |
|          \--\     programs     |
|             |    cGRE          |
\-------------+------------------/
#+end_src
* Dependent types
** Notation
**** Logical rules
$\infer{conclusion}{assumptions}$

reads /Assuming *assumptions* hold, *conclusion* also holds/
**** Typing judgements
$\typed{\Gamma}{t}{\tau}$

reads /In the context $\Gamma$ term $t$ has type $\tau$/

** Basic types
- $\TUnit$ type is a type with exactly one element $\typed{\Gamma}{\unit}{\TUnit}$
- Sum type denoted by $\TSum{A}{B}$ is a discriminated (tagged) union
- Product type $\TProd{A}{B}$ is just a pair
- Function types are denoted with an arrow, such that
  $A \rightarrow B$
  is the type of function that take an argument of type $A$ and returns $B$
- Function application is written using /juxtposition/.
** Dependent types
- Allow types to depend on arbitrary terms, for example $\TVector{A}{n}$ type
  is a type of lists with a known length
- Ability to depend on an arbitrary term and not just a value is important:
  allows to give precise type to more functions. For example, vector
  concatenation:
  $\infer{\typed{\Gamma}{xs â§º ys}{\TVector{A}{(n+m)}}}
    {\typed{\Gamma}{xs}{\TVector{A}{n}} \quad \typed{\Gamma}{ys}{\TVector{A}{m}}}$
** Dependent types could be used to represent propositions about terms
- For example, type $\type{IsEven}~n$ can be used to represent a proposition of
  evenness of a natural number
- Types with more than one argument could be used to represent logical relations
  between terms
- Types are propositions, terms are proofs (Curry-Howard isomorphism)
** Dependent types
- Widely used for Proof Assistants (Coq, Isabelle, NuPRL, etc)
- Some attempts to apply to systems programming (ATS)
- Type checking is hard
- Coming up with a well-typed term is sometimes much harder

* Division by zero
** Division by zero must be prevented
- We don't want to cause trap
- Static checks are not enough:
  - may divide by value read from the kernel
  - Dynamic checks may be necessary

** How to ensure dynamic checks are in place?
** Boolean blindness problem
- Consider this code
  #+begin_src C
    int result = someCheck(arguments);
    if (result) {
      // here the information about someCheck()
      // succeeded is lost for the compiler
      doSomething();
    } else {
      doSomethingElse();
    }
  #+end_src
- Getting the information back requires additional control flow analysis

** Dependent types to the rescue!
- Declare the type to represent the proposition of check being successful $S$
- Declare the type of negation: $\TNot{A}$
- Change the result type of check operation to be $\TSum{S}{\TNot{S}}$
- Branching on the result type will give a proof object of corresponding type,
  which can be used later
- => Can restrict some operations to the *success* branch by making them require
  the proof object as an argument

** Let's see an example: division
- Define an /is equal to zero/ type $\TEqZ{t}$
- Provide a /check if zero/ operation $\eqz{t}$ with the typing rule
  $\infer{\typed{\Gamma}{\eqz{t}}{\TSum{\TEqZ{t}}{\TNot{(\TEqZ{t})}}}}
         {\typed{\Gamma}{t}{\TWord}}$
- Restrict safe division operation to require a proof:
  $\infer{\typed{\Gamma}{\safediv{n}{m}{p}}{\TWord}}
  {\typed{\Gamma}{n~m}{\TWord} \quad \typed{\Gamma}{p}{\TNot{(\TEqZ{m})}}}$

* Memory safety
** Our assumptions
**** Limitations of our solution
- no support for user-space application tracing
- kernel memory is mapped at statically known range of addresses (holds for
  Linux with some nuances)
- no support for Linux high memory inspection
** Could instead use a modified trap handler
**** Pros
- That's what DTrace/SystemTap do
- Needed for user-space program instrumentation
**** Cons
- Can't instrument trap handlers themselves (double-trap)
- Still need a region based check to avoid reading from memory mapped I/O
**  Same approach as for division
- Dynamic checks might be needed
- Type to represent /less than/ relation: $\TLt{n}{m}$
- Check operation
  $\infer{\typed{\Gamma}{\mlt{n}{m}}{\TSum{\TLt{n}{m}}{\TNot{(\TLt{n}{m})}}}}
         {\typed{\Gamma}{n~m}{\TWord}}$

* Step counting
** Idea: represent computations as values
- Introduce type $\Timed{A}{n}$. Values of this type are computations returning
  type $A$ in $n$ steps
- Make all basic operations instances of $\Timed{}{}$, e.g.
  $\infer{\typed{\Gamma}{x + y}{\Timed{\TWord}{1}}}{\typed{\Gamma}{x~y}{\TWord}}$
** Timed computations can be combined
- Pure value can be promoted to a timed computation returning in no time
  $\infer{\typed{\Gamma}{\return{x}}{\Timed{A}{0}}}{\typed{\Gamma}{x}{A}}$
- Timed computation that returns $A$ and Timed computation parametrized on $A$
  can be combined into a single timed computation
  $\infer{\typed{\Gamma}{\bind{x}{f}}{\Timed{B}{(n+m)}}}{\typed{\Gamma}{x}{\Timed{A}{n}}
  \quad \typed{\Gamma}{f}{A \rightarrow \Timed{B}{m}}}$

** Example?
* Future work
- Nicer DSL
- Formal safety proofs
- Concurrency
- Other extensions

* Questions?

* Thanks!
